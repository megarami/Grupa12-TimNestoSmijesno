U softverskom inzinjeringu, strukturalni paterni su vrsta dizajn paterna koji olakšavaju identifikaciju jednostavnog naèina ostvarivanja veza meðu subjektima. Odgovorni su za izgradnju jednostavnih i efikasnih hijerarija klasa.
Postoji više strukturalnih paterna: Adapter, Most, Kompozitni, Ukrasni, Fasada, Perolahki i Proxy. Objasnit æemo neke:

Adapter:
Omoguæuje klasama sa razlièitim interfejsima da kolaboriraju. Pretvara interfejst jedne klase u interfejs koji druga klasa oèekuje. Neka imamo aplikaciju koja radi sa podacima u xml formatu. U nekom trenutku nam treba biblioteka koja radi samo sa JSON formatom. Na prvi pogled postoje dvije stvari koje možemo uraditi, prepraviti èitav kod i rizikovati krahiranje, ili izmijeniti biblioteku da radi sa XML što može biti nemoguæe. Rješenje je da kreiramo Adapter, specijalni objekat koji pretvara pozive poslane od jednog objekta u format koji drugi objekat razumije. Adapter radi i sa tipovima podataka i interfejsima. Adapter radi analogno kao univerzalna utiènica.


Bridge (most):
Bridge je strukturalni patern koji nam omoguæava da podijelimo veliku klasu ili skup usko vezanih klasa u dvije odvojene hijerarhije klasa, sa odvojenim apstrakcijama i impementacijama koje se mogu razvijati nezavisno jedna od druge.
Jednostavan primjer je sljedeæi. Neka imamo apsraktnu klasu Oblik, iz koje su izvedene  klase Sfera i Kocka. Ukoliko želimo dodati boje (npr. plavu i crvenu) trebali bismo napaviti izvedene klase CrvenaSfera, CrvenaKocka, PlavaSfera i PlavaKocka.  Što je nezgrapno i ukoliko je potrebno dodatno unaprijediti program, nastaje zbrka. Rješenje ovome je korištenje mosta. Podijelimo baznu klasu na dvije bazne klase koja sadrže jedna drugu Oblik i Boja. Iz Oblika izvodimo sve oblike koje želimo, a iz Boja sve boje. Ovime olakšavamo proširivanje i unaprijeðivanje programa. U programu LanacHotela, ovaj princip se iskoristio u klasi Hotel, tako da ukoliko želimo da proširimo uslugu i Apartmanima (sa više soba) iz klase Soba izvedemo klasu Apartman i dodamo novi atribut listaSoba, a u klasi Hotel to možemo i dalje svrstati u listuSoba.
*napomena* Ukoliko se to radi, onda je naziv Soba i listaSoba neispravan, ali program i dalje radi.
*dodatak* Adapter omoguæava da stvari rade nakon dizajniranja, Most prije dizajniranja. Most je dizajniran u poèetku da omoguæi nezavisno razvijanje apstrakcije i implementacije, a adapter nakon implementacije, spajajuæi razlièite klase.

Facade(fasada):
Strukturalni dizajn patern koji omoguæava pružanje pojednostavljenog interfejsa  u kompleksnom sistemu klasa, biblioteka i frejmvorka. Neka imamo sistem koji radi sa velikim skupom kompleksnih klasa, biblioteka i frejmovrkova. Moramo manuelno inicijalizirati sve ove objekte, paziti na zavisnosti, ispravljati redoslijed itd. Poslovna logika u tom sluèaju mora  usko pratiti implementaciju biblioteke. Takav kod je teško razumjeti i održavati. Rješenje je da se koristi fasada. To je klasa koja pruža jednostavan interfejs kompleksnom sistemo koji sadrži sve druge klase. Klasa ima ogranièanu funkcionalnost u poreðenju sa direktnim radom na sistemu, ali pruža samo one moguænosti koje su potrebne korisniku. Na primjer, aplikacija koja šalje video na YouTube koristi kompkleksnu biblioteku sa pretvaranje videa. Ako napravimu klasu sa jednom metodom encode(naziv, format). Mi smo napravili fasadu.